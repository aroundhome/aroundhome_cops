require:
  - rubocop-rspec

AllCops:
  Exclude:
    - 'bin/**/*'
    - 'db/schema.rb'
    - 'doc/**/*'
    - 'docker_app/**/*'
    - 'Guardfile'
    - 'tmp/**/*'
    - 'vendor/**/*'
    - 'playground/**/*'
    - 'public/**/*'
    - 'node_modules/**/*'
    - 'db/migrate/200*.rb'
    - 'db/migrate/2010*.rb'
    - 'db/migrate/2011*.rb'
    - 'db/migrate/2012*.rb'
    - 'db/migrate/2013*.rb'
    - 'db/migrate/2014*.rb'
    - 'db/migrate/2015*.rb'
    - 'db/migrate/2016*.rb'
    - 'db/migrate/2017*.rb'
  SuggestExtensions:
    rubocop-rails: false

# While we like to write blocks like the following
# expect { add_special_project }.not_to change { SpecialProject.count }
# Rubocop doesn't like that and prefers either of the following options for clarity
# expect { add_special_project }.not_to change(SpecialProject, :count)
# expect { add_special_project }.not_to(change { SpecialProject.count })
Lint/AmbiguousBlockAssociation:
  Exclude:
    - 'spec/**/*'

# Models can have a bunch of attributes which lead to long methods and high
# complexity values. However, these methods are still very readable because they
# usually have a lot of repetition.
Metrics:
  Exclude:
    - 'db/migrate/*.rb'

# See above (Metrics). This cop was previously called Metrics/LineLength
# and therefore disabled as well for migrations.
Layout/LineLength:
  Exclude:
    - 'db/migrate/*.rb'


# We need to configure exemptions for blocks that we generally accept to be
# long, since they are less comparable to methods and more comparable to
# modules/classes.
Metrics/BlockLength:
  IgnoredMethods:
    - context
    - describe
    - namespace
    - factory
    - define
    - shared_examples_for
    - shared_examples
    - xcontext
    - xdescribe
  Exclude:
    - 'config/environments/*.rb' # instead of excluding all :configure methods
    - 'config/routes.rb'
    - 'spec/spec_helper.rb' # instead of excluding all :configure methods
    - '*.gemspec' # a gemspec could easily have more than the 25 lines limit

# Increase from rubocops default limit of 10 lines.
# The idea of increasing the default limit is to reduce the "false alarm rate"
# of this cop on projects without a rubocop_todo.yml.
# The intention of the cop is to fight complicated methods, but it often triggers
# for (subjectively) easy methods, too.
Metrics/MethodLength:
  Max: 16

Style/AsciiComments:
  Enabled: false

Style/Documentation:
  Enabled: false

# Encoding comments are not neccessary in all 2.x versions of ruby, since
# UTF-8 has become the default encoding.
Style/Encoding:
  Enabled: true
  Exclude:
    - '*.gemspec'

# Ruby 2.3 introduced optional automatic freezing of string literals
# This might become default in future versions.
# For details on this feature see the internet, e.g. https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3
Style/FrozenStringLiteralComment:
  EnforcedStyle: always

# This cop tries to make you use module_funtion instead of extend self
# This is bad because both have their own use-case and should not be used
# and sometimes cannot be used to do the same thing
Style/ModuleFunction:
  Enabled: false

# While it is very often useful to separate numbers after every three digits
# for readability, this mostly doesn't make sense if the number doesn't
# represent an amount but rather an identifier. Thus the use of underscores
# every three digits is recommended but not enforced.
Style/NumericLiterals:
  Enabled: false

# Do not force the same one letter variable names for all occurences of inject
Style/SingleLineBlockParams:
  Enabled: false

# Rubocop 0.52.0 added new 'unannotated' style, which mistakenly treat
# date/time formatting strings as regular formatting strings
# Disable is temporary until the fix is released.
# To check if the bug was fixed, make sure this code is okay for Rubocop:
# Time.strptime('2017-12-13', '%Y-%m-%d')
Style/FormatStringToken:
  Enabled: false

# The maximum amount of positional arguments in a method really shouldn't exceed
# the rubocop default of 5.
# However, keyword arguments do not make a method signature as unreadable as positional
# arguments. There are valid cases for longer argument lists (e.g. data objects or
# DSLs with implicit default values).
# In those cases keyword args provide a good balance between readability and the need to
# pass more arguments into an object.
Metrics/ParameterLists:
  CountKeywordArgs: false

# Adding "and" prefix to list of allowed prefixes to allow for nested contexts
# that start with "and" as a connector word "when foo is true and bar is false"
RSpec/ContextWording:
  Prefixes:
  - when
  - with
  - without
  - and

# Complex tests require more flexibility in their length than allowed by default (5).
RSpec/ExampleLength:
  Max: 15

# Complex tests often rely on more objects than allowed by default (5).
RSpec/MultipleMemoizedHelpers:
  Max: 10

# Named subjects are not used anywhere
RSpec/NamedSubject:
  Enabled: false

# Complex tests often generate more readable output with deeper nesting. The
# default (3) doesn't provide enough flexibility.
RSpec/NestedGroups:
  Max: 7

# ----------------- Rubocop-forced enablements --------------

# Since version 0.80 rubocop wants to cause fewer breaking changes by new cops.
# Since then new cops have to be manually enabled/disabled for a warning to
# disappear. Unless there is a reason to opt out of them, we will enable all of
# them below.
# Disabled cops will appear above with a comment explaining disablement.

Gemspec/DateAssignment: # (new in 1.10)
  Enabled: true
Layout/SpaceBeforeBrackets: # (new in 1.7)
  Enabled: true
Lint/AmbiguousAssignment: # (new in 1.7)
  Enabled: true
Lint/DeprecatedConstants: # (new in 1.8)
  Enabled: true
Lint/DuplicateBranch: # (new in 1.3)
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement: # (new in 1.1)
  Enabled: true
Lint/EmptyBlock: # (new in 1.1)
  Enabled: true
Lint/EmptyClass: # (new in 1.3)
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # (new in 1.8)
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # (new in 1.2)
  Enabled: true
Lint/NumberedParameterAssignment: # (new in 1.9)
  Enabled: true
Lint/OrAssignmentToConstant: # (new in 1.9)
  Enabled: true
Lint/RedundantDirGlobSort: # (new in 1.8)
  Enabled: true
Lint/SymbolConversion: # (new in 1.9)
  Enabled: true
Lint/ToEnumArguments: # (new in 1.1)
  Enabled: true
Lint/TripleQuotes: # (new in 1.9)
  Enabled: true
Lint/UnexpectedBlockArity: # (new in 1.5)
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # (new in 1.1)
  Enabled: true
Style/ArgumentsForwarding: # (new in 1.1)
  Enabled: true
Style/CollectionCompact: # (new in 1.2)
  Enabled: true
Style/DocumentDynamicEvalDefinition: # (new in 1.1)
  Enabled: true
Style/EndlessMethod: # (new in 1.8)
  Enabled: true
Style/HashConversion: # (new in 1.10)
  Enabled: true
Style/HashExcept: # (new in 1.7)
  Enabled: true
Style/IfWithBooleanLiteralBranches: # (new in 1.9)
  Enabled: true
Style/NegatedIfElseCondition: # (new in 1.2)
  Enabled: true
Style/NilLambda: # (new in 1.3)
  Enabled: true
Style/RedundantArgument: # (new in 1.4)
  Enabled: true
Style/StringChars: # (new in 1.12)
  Enabled: true
Style/SwapValues: # (new in 1.1)
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # (new in 1.18)
  Enabled: true
Lint/EmptyInPattern: # (new in 1.16)
  Enabled: true
Naming/InclusiveLanguage: # (new in 1.18)
  Enabled: true
Style/InPatternThen: # (new in 1.16)
  Enabled: true
Style/MultilineInPatternThen: # (new in 1.16)
  Enabled: true
Style/QuotedSymbols: # (new in 1.16)
  Enabled: true

# ----------------- Rubocop-Rspec forced enablements --------------

RSpec/IdenticalEqualityAssertion: # (new in 2.4)
  Enabled: true
RSpec/Rails/AvoidSetupHook: # (new in 2.4)
  Enabled: true
