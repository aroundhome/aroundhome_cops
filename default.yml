plugins:
  - rubocop-performance
  - rubocop-rspec
  - rubocop-rake

AllCops:
  Exclude:
    - "bin/**/*"
    - "db/schema.rb"
    - "doc/**/*"
    - "docker_app/**/*"
    - "Guardfile"
    - "tmp/**/*"
    - "vendor/**/*"
    - "playground/**/*"
    - "public/**/*"
    - "node_modules/**/*"
    - "db/migrate/200*.rb"
    - "db/migrate/201*.rb"
    - "db/migrate/2020*.rb"
    - "db/migrate/2021*.rb"
    - "db/migrate/2022*.rb"
    - "db/migrate/2023*.rb"
  SuggestExtensions:
    rubocop-rails: false
    rubocop-factory_bot: false

# While we like to write blocks like the following
# expect { add_special_project }.not_to change { SpecialProject.count }
# Rubocop doesn't like that and prefers either of the following options for clarity
# expect { add_special_project }.not_to change(SpecialProject, :count)
# expect { add_special_project }.not_to(change { SpecialProject.count })
Lint/AmbiguousBlockAssociation:
  Exclude:
    - "spec/**/*"

# Models can have a bunch of attributes which lead to long methods and high
# complexity values. However, these methods are still very readable because they
# usually have a lot of repetition.
Metrics:
  Exclude:
    - "db/migrate/*.rb"

# See above (Metrics). This cop was previously called Metrics/LineLength
# and therefore disabled as well for migrations.
Layout/LineLength:
  Exclude:
    - "db/migrate/*.rb"

# We need to configure exemptions for blocks that we generally accept to be
# long, since they are less comparable to methods and more comparable to
# modules/classes.
Metrics/BlockLength:
  AllowedMethods:
    - context
    - describe
    - namespace
    - factory
    - define
    - shared_examples_for
    - shared_examples
    - xcontext
    - xdescribe
  Exclude:
    - "config/environments/*.rb" # instead of excluding all :configure methods
    - "config/routes.rb"
    - "spec/spec_helper.rb" # instead of excluding all :configure methods
    - "*.gemspec" # a gemspec could easily have more than the 25 lines limit

# Increase from rubocops default limit of 10 lines.
# The idea of increasing the default limit is to reduce the "false alarm rate"
# of this cop on projects without a rubocop_todo.yml.
# The intention of the cop is to fight complicated methods, but it often triggers
# for (subjectively) easy methods, too.
Metrics/MethodLength:
  Max: 16

Style/AsciiComments:
  Enabled: false

Style/Documentation:
  Enabled: false

# Encoding comments are not neccessary in all 2.x versions of ruby, since
# UTF-8 has become the default encoding.
Style/Encoding:
  Enabled: true
  Exclude:
    - "*.gemspec"

# Ruby 2.3 introduced optional automatic freezing of string literals
# This might become default in future versions.
# For details on this feature see the internet, e.g. https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3
Style/FrozenStringLiteralComment:
  EnforcedStyle: always

# This cop tries to make you use module_funtion instead of extend self
# This is bad because both have their own use-case and should not be used
# and sometimes cannot be used to do the same thing
Style/ModuleFunction:
  Enabled: false

# While it is very often useful to separate numbers after every three digits
# for readability, this mostly doesn't make sense if the number doesn't
# represent an amount but rather an identifier. Thus the use of underscores
# every three digits is recommended but not enforced.
Style/NumericLiterals:
  Enabled: false

# Do not force the same one letter variable names for all occurences of inject
Style/SingleLineBlockParams:
  Enabled: false

# Rubocop 0.52.0 added new 'unannotated' style, which mistakenly treat
# date/time formatting strings as regular formatting strings
# Disable is temporary until the fix is released.
# To check if the bug was fixed, make sure this code is okay for Rubocop:
# Time.strptime('2017-12-13', '%Y-%m-%d')
Style/FormatStringToken:
  Enabled: false

# The maximum amount of positional arguments in a method really shouldn't exceed
# the rubocop default of 5.
# However, keyword arguments do not make a method signature as unreadable as positional
# arguments. There are valid cases for longer argument lists (e.g. data objects or
# DSLs with implicit default values).
# In those cases keyword args provide a good balance between readability and the need to
# pass more arguments into an object.
Metrics/ParameterLists:
  CountKeywordArgs: false

# People coming from other languages or our junior colleagues will find a single & confusing.
# Omitting the parameter name is neither more readable or helpful, therefore we prefer to use &block syntax.
Naming/BlockForwarding:
  Enabled: true
  EnforcedStyle: explicit

# Adding "and" prefix to list of allowed prefixes to allow for nested contexts
# that start with "and" as a connector word "when foo is true and bar is false"
RSpec/ContextWording:
  Prefixes:
    - when
    - with
    - without
    - and

# Complex tests require more flexibility in their length than allowed by default (5).
RSpec/ExampleLength:
  Max: 10

# Complex tests often rely on more objects than allowed by default (5).
RSpec/MultipleMemoizedHelpers:
  Max: 10

# We rarely use named subjects in our own projects.
# While it is a good practice in some cases, we do not want to enforce it
# through Rubocop.
# https://www.rubydoc.info/gems/rubocop-rspec/1.6.0/RuboCop/Cop/RSpec/NamedSubject
RSpec/NamedSubject:
  Enabled: false

# Complex tests often generate more readable output with deeper nesting. The
# default (3) doesn't provide enough flexibility.
RSpec/NestedGroups:
  Max: 7

# While well intentioned at teaching about the existence of be_something matchers
# in RSpec, this one produces false positives on methods such as
#
#     expect(hash.key?('foo')).to be_truthy
#
# Where it suggests to change towards:
#
#     expect(hash).to be_key('foo')
#
# While this works, it is less readable. The hash IS NOT the key, but it HAS the key.
# Similar mistakes happen for other methods (e.g. File.exist?).
RSpec/PredicateMatcher:
  Enabled: false

# Our codebase was consistent across the company before we started to introduce rubocop-rspec
# lots of our repositories are not using message spies currently
RSpec/MessageSpies:
  EnforcedStyle: receive

# While in general 2FA is a good idea, adding 2FA to CI/CD is a difficulty.
Gemspec/RequireMFA: # new in 1.23
  Enabled: false

# Suggests to add a description to every rake task. However, we only
# want to describe "public" tasks, not all of them.
# The cop also flags places where we hook into internal tasks of other gems, e.g.
#    task 'resque:setup' => :environment
Rake/Desc:
  Enabled: false

# ----------------- Rubocop-forced enablements --------------

# Since version 0.80 rubocop wants to cause fewer breaking changes by new cops.
# Since then new cops have to be manually enabled/disabled for a warning to
# disappear. Unless there is a reason to opt out of them, we will enable all of
# them below.
# Disabled cops will appear above with a comment explaining disablement.

Layout/SpaceBeforeBrackets: # (new in 1.7)
  Enabled: true
Lint/AmbiguousAssignment: # (new in 1.7)
  Enabled: true
Lint/AmbiguousOperatorPrecedence: # (new in 1.21)
  Enabled: true
Lint/AmbiguousRange: # (new in 1.19)
  Enabled: true
Lint/DeprecatedConstants: # (new in 1.8)
  Enabled: true
Lint/DuplicateBranch: # (new in 1.3)
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement: # (new in 1.1)
  Enabled: true
Lint/EmptyBlock: # (new in 1.1)
  Enabled: true
Lint/EmptyClass: # (new in 1.3)
  Enabled: true
Lint/IncompatibleIoSelectWithFiberScheduler: # (new in 1.21)
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # (new in 1.8)
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # (new in 1.2)
  Enabled: true
Lint/NumberedParameterAssignment: # (new in 1.9)
  Enabled: true
Lint/OrAssignmentToConstant: # (new in 1.9)
  Enabled: true
Lint/RedundantDirGlobSort: # (new in 1.8)
  Enabled: true
Lint/RequireRelativeSelfPath: # (new in 1.22)
  Enabled: true
Lint/SymbolConversion: # (new in 1.9)
  Enabled: true
Lint/ToEnumArguments: # (new in 1.1)
  Enabled: true
Lint/TripleQuotes: # (new in 1.9)
  Enabled: true
Lint/UnexpectedBlockArity: # (new in 1.5)
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # (new in 1.1)
  Enabled: true
Security/IoMethods: # (new in 1.22)
  Enabled: true
Style/ArgumentsForwarding: # (new in 1.1)
  Enabled: true
Style/CollectionCompact: # (new in 1.2)
  Enabled: true
Style/DocumentDynamicEvalDefinition: # (new in 1.1)
  Enabled: true
Style/EndlessMethod: # (new in 1.8)
  Enabled: true
Style/HashConversion: # (new in 1.10)
  Enabled: true
Style/HashExcept: # (new in 1.7)
  Enabled: true
Style/IfWithBooleanLiteralBranches: # (new in 1.9)
  Enabled: true
Style/NegatedIfElseCondition: # (new in 1.2)
  Enabled: true
Style/NilLambda: # (new in 1.3)
  Enabled: true
Style/NumberedParameters: # (new in 1.22)
  Enabled: true
Style/NumberedParametersLimit: # (new in 1.22)
  Enabled: true
Style/RedundantArgument: # (new in 1.4)
  Enabled: true
Style/RedundantSelfAssignmentBranch: # (new in 1.19)
  Enabled: true
Style/SelectByRegexp: # (new in 1.22)
  Enabled: true
Style/StringChars: # (new in 1.12)
  Enabled: true
Style/SwapValues: # (new in 1.1)
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # (new in 1.18)
  Enabled: true
Lint/EmptyInPattern: # (new in 1.16)
  Enabled: true
Naming/InclusiveLanguage: # (new in 1.18)
  Enabled: true
Style/InPatternThen: # (new in 1.16)
  Enabled: true
Style/MultilineInPatternThen: # (new in 1.16)
  Enabled: true
Style/QuotedSymbols: # (new in 1.16)
  Enabled: true
Gemspec/DeprecatedAttributeAssignment: # new in 1.30
  Enabled: true
Layout/LineContinuationLeadingSpace: # new in 1.31
  Enabled: true
Layout/LineContinuationSpacing: # new in 1.31
  Enabled: true
Lint/ConstantOverwrittenInRescue: # new in 1.31
  Enabled: true
Lint/NonAtomicFileOperation: # new in 1.31
  Enabled: true
Lint/RefinementImportMethods: # new in 1.27
  Enabled: true
Lint/RequireRangeParentheses: # new in 1.32
  Enabled: true
Lint/UselessRuby2Keywords: # new in 1.23
  Enabled: true
Security/CompoundHash: # new in 1.28
  Enabled: true
Style/EmptyHeredoc: # new in 1.32
  Enabled: true
Style/EnvHome: # new in 1.29
  Enabled: true
Style/FetchEnvVar: # new in 1.28
  Enabled: true
Style/FileRead: # new in 1.24
  Enabled: true
Style/FileWrite: # new in 1.24
  Enabled: true
Style/MagicCommentFormat: # new in 1.35
  Enabled: true
Style/MapCompactWithConditionalBlock: # new in 1.30
  Enabled: true
Style/MapToHash: # new in 1.24
  Enabled: true
Style/NestedFileDirname: # new in 1.26
  Enabled: true
Style/ObjectThen: # new in 1.28
  Enabled: true
Style/OpenStructUse: # new in 1.23
  Enabled: true
Style/RedundantInitialize: # new in 1.27
  Enabled: true
Gemspec/DevelopmentDependencies: # new in 1.44
  Enabled: true
Lint/DuplicateMagicComment: # new in 1.37
  Enabled: true
Lint/DuplicateMatchPattern: # new in 1.50
  Enabled: true
Lint/ItWithoutArgumentsInBlock: # new in 1.59
  Enabled: true
Lint/LiteralAssignmentInCondition: # new in 1.58
  Enabled: true
Lint/MixedCaseRange: # new in 1.53
  Enabled: true
Lint/RedundantRegexpQuantifiers: # new in 1.53
  Enabled: true
Lint/UselessRescue: # new in 1.43
  Enabled: true
Metrics/CollectionLiteralLength: # new in 1.47
  Enabled: true
Style/ArrayIntersect: # new in 1.40
  Enabled: true
Style/ComparableClamp: # new in 1.44
  Enabled: true
Style/ConcatArrayLiterals: # new in 1.41
  Enabled: true
Style/DataInheritance: # new in 1.49
  Enabled: true
Style/DirEmpty: # new in 1.48
  Enabled: true
Style/ExactRegexpMatch: # new in 1.51
  Enabled: true
Style/FileEmpty: # new in 1.48
  Enabled: true
Style/MapIntoArray: # new in 1.63
  Enabled: true
Style/MapToSet: # new in 1.42
  Enabled: true
Style/MinMaxComparison: # new in 1.42
  Enabled: true
Style/OperatorMethodCall: # new in 1.37
  Enabled: true
Style/RedundantArrayConstructor: # new in 1.52
  Enabled: true
Style/RedundantConstantBase: # new in 1.40
  Enabled: true
Style/RedundantCurrentDirectoryInPath: # new in 1.53
  Enabled: true
Style/RedundantDoubleSplatHashBraces: # new in 1.41
  Enabled: true
Style/RedundantEach: # new in 1.38
  Enabled: true
Style/RedundantFilterChain: # new in 1.52
  Enabled: true
Style/RedundantHeredocDelimiterQuotes: # new in 1.45
  Enabled: true
Style/RedundantLineContinuation: # new in 1.49
  Enabled: true
Style/RedundantRegexpArgument: # new in 1.53
  Enabled: true
Style/RedundantRegexpConstructor: # new in 1.52
  Enabled: true
Style/RedundantStringEscape: # new in 1.37
  Enabled: true
Style/ReturnNilInPredicateMethodDefinition: # new in 1.53
  Enabled: true
Style/SingleLineDoEndBlock: # new in 1.57
  Enabled: true
Style/SuperWithArgsParentheses: # new in 1.58
  Enabled: true
Style/YAMLFileRead: # new in 1.53
  Enabled: true
Style/SendWithLiteralMethodName: # new in 1.64
  Enabled: true
Style/SuperArguments: # new in 1.64
  Enabled: true

# ----------------- Rubocop-Rspec forced enablements --------------
RSpec/ExcessiveDocstringSpacing: # (new in 2.5)
  Enabled: true
RSpec/IdenticalEqualityAssertion: # (new in 2.4)
  Enabled: true
RSpec/SubjectDeclaration: # (new in 2.5)
  Enabled: true
RSpec/BeEq: # new in 2.9.0
  Enabled: true
RSpec/BeNil: # new in 2.9.0
  Enabled: true
RSpec/ChangeByZero: # new in 2.11.0
  Enabled: true
RSpec/VerifiedDoubleReference: # new in 2.10.0
  Enabled: true
RSpec/RedundantPredicateMatcher: # new in 2.26
  Enabled: true
RSpec/RemoveConst: # new in 2.26
  Enabled: true
RSpec/RepeatedSubjectCall: # new in 2.27
  Enabled: true
RSpec/SkipBlockInsideExample: # new in 2.19
  Enabled: true
RSpec/SortMetadata: # new in 2.14
  Enabled: true
RSpec/SpecFilePathFormat: # new in 2.24
  Enabled: true
RSpec/SpecFilePathSuffix: # new in 2.24
  Enabled: true
RSpec/UndescriptiveLiteralsDescription: # new in 2.29
  Enabled: true
RSpec/BeEmpty: # new in 2.20
  Enabled: true
RSpec/ContainExactly: # new in 2.19
  Enabled: true
RSpec/DuplicatedMetadata: # new in 2.16
  Enabled: true
RSpec/EmptyMetadata: # new in 2.24
  Enabled: true
RSpec/EmptyOutput: # new in 2.29
  Enabled: true
RSpec/Eq: # new in 2.24
  Enabled: true
RSpec/IndexedLet: # new in 2.20
  Enabled: true
RSpec/IsExpectedSpecify: # new in 2.27
  Enabled: true
RSpec/MatchArray: # new in 2.19
  Enabled: true
RSpec/MetadataStyle: # new in 2.24
  Enabled: true
RSpec/NoExpectationExample: # new in 2.13
  Enabled: true
RSpec/PendingWithoutReason: # new in 2.16
  Enabled: true
RSpec/ReceiveMessages: # new in 2.23
  Enabled: true
RSpec/RedundantAround: # new in 2.19
  Enabled: true
RSpec/ExpectInLet: # new in 2.30
  Enabled: true

# ----------------- Rubocop-Performance forced enablements --------------
Performance/AncestorsInclude: # new in 1.7
  Enabled: true
Performance/BigDecimalWithNumericArgument: # new in 1.7
  Enabled: true
Performance/BlockGivenWithExplicitBlock: # new in 1.9
  Enabled: true
Performance/CollectionLiteralInLoop: # new in 1.8
  Enabled: true
Performance/ConcurrentMonotonicTime: # new in 1.12
  Enabled: true
Performance/ConstantRegexp: # new in 1.9
  Enabled: true
Performance/MapCompact: # new in 1.11
  Enabled: true
Performance/MapMethodChain: # new in 1.19
  Enabled: true
Performance/MethodObjectAsBlock: # new in 1.9
  Enabled: true
Performance/RedundantEqualityComparisonBlock: # new in 1.10
  Enabled: true
Performance/RedundantSortBlock: # new in 1.7
  Enabled: true
Performance/RedundantSplitRegexpArgument: # new in 1.10
  Enabled: true
Performance/RedundantStringChars: # new in 1.7
  Enabled: true
Performance/ReverseFirst: # new in 1.7
  Enabled: true
Performance/SortReverse: # new in 1.7
  Enabled: true
Performance/Squeeze: # new in 1.7
  Enabled: true
Performance/StringIdentifierArgument: # new in 1.13
  Enabled: true
Performance/StringInclude: # new in 1.7
  Enabled: true
Performance/Sum: # new in 1.8
  Enabled: true
